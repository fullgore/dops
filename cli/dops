#!/bin/bash
#
# Enter or execute commands in the dops Docker image.
#

here=$(dirname $(readlink -f $0))

DOPS_IMAGE=krkr/dops
DOPS_VERSION=latest

help() {
    echo 'Usage: dops COMMAND

Commands

  go                Enter in dops
  exec              Execute a command in dops

  volume:build      Build a machine volume

  update            Update dops'
}

build_machine_volume() {
  if [[ -f dops-volume.json ]]; then

    local name=$(jq  -r .name  dops-volume.json)
    [[ "$name" == "null" ]] && echo "error: name not found in dops-volume.json" && exit 1

    local volume=$(jq -r .volume dops-volume.json)
    [[ "$volume" == "null" ]] && volume=/root/.docker/machine
  else
    echo "error: dops-volume.json config file not found" && exit 1
  fi

  local image="machine/$name"

  # FIXME
  sudo chown -R $USER:$USER .

  dockerfile=".$(date +%s).Dockerfile"
  trap "rm -f $dockerfile" EXIT
  echo '
FROM scratch
COPY . '$volume'
VOLUME '$volume'
ENTRYPOINT ["/bin/true"]
' \
  > $dockerfile

  docker build -t $image -f $dockerfile .
  echo
  docker images | grep $image
}

create_machine_volume() {
  declare mode=${1:-ro}

  local container=$VOLUME_NAME-$mode
  local image=$VOLUME_IMAGE

  LOCAL_MACHINE_STORAGE_PATH=$(pwd)/machine

  is=$(docker ps -a --filter=name=$container | grep $container'$' | wc -l)

  if [ $is -ne 1 ]; then
    echo " --> [$MACHINE-dops] Create volume $MACHINE..."
    case $mode in
      rw)
          # FIXME
          [ ! -f $LOCAL_MACHINE_STORAGE_PATH/dops-volume.json ] &&
            echo "error: $LOCAL_MACHINE_STORAGE_PATH/dops-volume.json not found to create machine volume" && exit 1

          docker create --name $container $image \
            -v $LOCAL_MACHINE_STORAGE_PATH/machine:/root/.docker/machine
          ;;
      *)
          docker create --name $container $image
          ;;
    esac
  fi
}

env_files() {
  local arg=""
  while read env_file; do
    arg="$arg --env-file=$(readlink -f $env_file)"
  done < <(find . -name "*.env" -type f)
  echo "$arg"
}

volumes_from() {
  declare name=${1:-""} mode=$2
  [[ "$name" != "" ]] \
    && echo "--volumes-from $VOLUME_NAME-$mode" \
    || echo
}

zsh_dops_rw() {
  local container=$MACHINE-dops
  local isStarted=$(docker ps --filter=name=$container | grep $container'$' | wc -l)
  if [ $isStarted -ne 1 ]; then
    create_machine_volume rw
    docker run --rm -ti \
      --name $container \
      -v $(pwd):/ops \
      -e WELCOME=yes \
      $(volumes_from $VOLUME_NAME rw) \
      $(env_files) \
      $DOPS_IMAGE:$DOPS_VERSION zsh
  else
    docker exec -ti $container zsh
  fi
}

exec_in_dops() {
  local container=$MACHINE-dops

  create_machine_volume ro

  TTY=""
  if [[ "$@" == "zsh" ]]; then
    TTY="-ti"
  fi

  docker run --rm $TTY \
    --name $container \
    $(volumes_from $VOLUME_NAME ro) \
    $DOPS_IMAGE:$DOPS_VERSION $@
}

read_config() {
  if [[ -f dops.json ]]; then
    MACHINE=$(jq -r .machine_volume dops.json)

    VOLUME_IMAGE=machine/$MACHINE
    VOLUME_NAME=machine-$MACHINE
  else
    MACHINE=$(basename $(pwd))
  fi

  # [[ "$MACHINE" == "" ]] && \
  #   echo "error: machine_volume undefined" && exit 1
}

main() {
  local cmd=${1:-""} && shift
  case $cmd in

    go)
      read_config
      zsh_dops_rw "$@"
      ;;

    exec)
      read_config
      [[ "$1" == "" ]] && echo "error: no command to exec" && exit 1
      exec_in_dops "$@"
      ;;

    machine:add)
      build_machine_volume
      ;;

    update)
      docker pull $DOPS_IMAGE:$DOPS_VERSION
      ;;
    -h|--help)
      help
      ;;
    *)
      echo "error: unknown command"
      help
      ;;
  esac
}

main "$@"
